
W3_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d20  08002d20  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  08002d20  08002d20  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d20  08002d20  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08002d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000138  08002e60  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002e60  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000962e  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4f  00000000  00000000  0002978f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bdf  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bad3  00000000  00000000  000433d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821b3  00000000  00000000  0004eeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d105d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029bc  00000000  00000000  000d10b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce8 	.word	0x08002ce8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	08002ce8 	.word	0x08002ce8

0800014c <get_mode>:
#define MODIFY_GREEN	4
#define WRONG_MODE		5

static uint8_t modeBuffer;

uint8_t get_mode (void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return modeBuffer;
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <get_mode+0x10>)
 8000152:	781b      	ldrb	r3, [r3, #0]
}
 8000154:	4618      	mov	r0, r3
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr
 800015c:	20000157 	.word	0x20000157

08000160 <fsm_for_input_processing>:
	buttonState[BUTTON1] = BUTTON_RELEASED;
	buttonState[BUTTON2] = BUTTON_RELEASED;
	buttonState[BUTTON3] = BUTTON_RELEASED;
}

void fsm_for_input_processing ( void ){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000166:	2300      	movs	r3, #0
 8000168:	607b      	str	r3, [r7, #4]
 800016a:	e128      	b.n	80003be <fsm_for_input_processing+0x25e>
switch (i) {
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	f000 80c4 	beq.w	80002fc <fsm_for_input_processing+0x19c>
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2b02      	cmp	r3, #2
 8000178:	f300 8117 	bgt.w	80003aa <fsm_for_input_processing+0x24a>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d003      	beq.n	800018a <fsm_for_input_processing+0x2a>
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d05c      	beq.n	8000242 <fsm_for_input_processing+0xe2>

	break;
	}

	default:
		break;
 8000188:	e10f      	b.n	80003aa <fsm_for_input_processing+0x24a>
		switch (buttonState[i]){
 800018a:	4a91      	ldr	r2, [pc, #580]	; (80003d0 <fsm_for_input_processing+0x270>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b02      	cmp	r3, #2
 8000194:	d043      	beq.n	800021e <fsm_for_input_processing+0xbe>
 8000196:	2b02      	cmp	r3, #2
 8000198:	f300 8109 	bgt.w	80003ae <fsm_for_input_processing+0x24e>
 800019c:	2b00      	cmp	r3, #0
 800019e:	d002      	beq.n	80001a6 <fsm_for_input_processing+0x46>
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d024      	beq.n	80001ee <fsm_for_input_processing+0x8e>
		break;
 80001a4:	e103      	b.n	80003ae <fsm_for_input_processing+0x24e>
				if( is_button_pressed (BUTTON1)){
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 f996 	bl	80004d8 <is_button_pressed>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d041      	beq.n	8000236 <fsm_for_input_processing+0xd6>
					buttonState[i] = BUTTON_PRESSED ;
 80001b2:	4a87      	ldr	r2, [pc, #540]	; (80003d0 <fsm_for_input_processing+0x270>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4413      	add	r3, r2
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
					modeBuffer++;
 80001bc:	4b85      	ldr	r3, [pc, #532]	; (80003d4 <fsm_for_input_processing+0x274>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	b2da      	uxtb	r2, r3
 80001c4:	4b83      	ldr	r3, [pc, #524]	; (80003d4 <fsm_for_input_processing+0x274>)
 80001c6:	701a      	strb	r2, [r3, #0]
					if (modeBuffer == WRONG_MODE){
 80001c8:	4b82      	ldr	r3, [pc, #520]	; (80003d4 <fsm_for_input_processing+0x274>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b05      	cmp	r3, #5
 80001ce:	d132      	bne.n	8000236 <fsm_for_input_processing+0xd6>
						reset_DELTA();
 80001d0:	f001 f9d4 	bl	800157c <reset_DELTA>
						init_after_modifying();
 80001d4:	f000 ffce 	bl	8001174 <init_after_modifying>
						setTimer2(1010);
 80001d8:	f240 30f2 	movw	r0, #1010	; 0x3f2
 80001dc:	f000 fdfe 	bl	8000ddc <setTimer2>
						setTimer1(10);
 80001e0:	200a      	movs	r0, #10
 80001e2:	f000 fde1 	bl	8000da8 <setTimer1>
						modeBuffer = NORMAL_MODE;
 80001e6:	4b7b      	ldr	r3, [pc, #492]	; (80003d4 <fsm_for_input_processing+0x274>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
				break;
 80001ec:	e023      	b.n	8000236 <fsm_for_input_processing+0xd6>
				if (! is_button_pressed (BUTTON1)){
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f972 	bl	80004d8 <is_button_pressed>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d105      	bne.n	8000206 <fsm_for_input_processing+0xa6>
					buttonState[i] = BUTTON_RELEASED ;
 80001fa:	4a75      	ldr	r2, [pc, #468]	; (80003d0 <fsm_for_input_processing+0x270>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
				break ;
 8000204:	e019      	b.n	800023a <fsm_for_input_processing+0xda>
					if( is_button_pressed_1s (BUTTON1) ){
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f980 	bl	800050c <is_button_pressed_1s>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d013      	beq.n	800023a <fsm_for_input_processing+0xda>
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000212:	4a6f      	ldr	r2, [pc, #444]	; (80003d0 <fsm_for_input_processing+0x270>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	2202      	movs	r2, #2
 800021a:	701a      	strb	r2, [r3, #0]
				break ;
 800021c:	e00d      	b.n	800023a <fsm_for_input_processing+0xda>
				if (! is_button_pressed (BUTTON1)){
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f95a 	bl	80004d8 <is_button_pressed>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d109      	bne.n	800023e <fsm_for_input_processing+0xde>
					buttonState[i] = BUTTON_RELEASED ;
 800022a:	4a69      	ldr	r2, [pc, #420]	; (80003d0 <fsm_for_input_processing+0x270>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
				break ;
 8000234:	e003      	b.n	800023e <fsm_for_input_processing+0xde>
				break;
 8000236:	bf00      	nop
 8000238:	e0b9      	b.n	80003ae <fsm_for_input_processing+0x24e>
				break ;
 800023a:	bf00      	nop
 800023c:	e0b7      	b.n	80003ae <fsm_for_input_processing+0x24e>
				break ;
 800023e:	bf00      	nop
		break;
 8000240:	e0b5      	b.n	80003ae <fsm_for_input_processing+0x24e>
		switch ( buttonState[i] ){
 8000242:	4a63      	ldr	r2, [pc, #396]	; (80003d0 <fsm_for_input_processing+0x270>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b02      	cmp	r3, #2
 800024c:	d046      	beq.n	80002dc <fsm_for_input_processing+0x17c>
 800024e:	2b02      	cmp	r3, #2
 8000250:	f300 80af 	bgt.w	80003b2 <fsm_for_input_processing+0x252>
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <fsm_for_input_processing+0xfe>
 8000258:	2b01      	cmp	r3, #1
 800025a:	d027      	beq.n	80002ac <fsm_for_input_processing+0x14c>
	break;
 800025c:	e0a9      	b.n	80003b2 <fsm_for_input_processing+0x252>
				if( is_button_pressed (BUTTON2)){
 800025e:	2001      	movs	r0, #1
 8000260:	f000 f93a 	bl	80004d8 <is_button_pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d01c      	beq.n	80002a4 <fsm_for_input_processing+0x144>
					buttonState[i] = BUTTON_PRESSED;
 800026a:	4a59      	ldr	r2, [pc, #356]	; (80003d0 <fsm_for_input_processing+0x270>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
					if (modeBuffer != NORMAL_MODE){
 8000274:	4b57      	ldr	r3, [pc, #348]	; (80003d4 <fsm_for_input_processing+0x274>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d013      	beq.n	80002a4 <fsm_for_input_processing+0x144>
						switch (modeBuffer) {
 800027c:	4b55      	ldr	r3, [pc, #340]	; (80003d4 <fsm_for_input_processing+0x274>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b04      	cmp	r3, #4
 8000282:	d00c      	beq.n	800029e <fsm_for_input_processing+0x13e>
 8000284:	2b04      	cmp	r3, #4
 8000286:	dc0f      	bgt.n	80002a8 <fsm_for_input_processing+0x148>
 8000288:	2b02      	cmp	r3, #2
 800028a:	d002      	beq.n	8000292 <fsm_for_input_processing+0x132>
 800028c:	2b03      	cmp	r3, #3
 800028e:	d003      	beq.n	8000298 <fsm_for_input_processing+0x138>
								break;
 8000290:	e00a      	b.n	80002a8 <fsm_for_input_processing+0x148>
								modify_RED();
 8000292:	f001 f90d 	bl	80014b0 <modify_RED>
								break;
 8000296:	e008      	b.n	80002aa <fsm_for_input_processing+0x14a>
								modify_YELLOW();
 8000298:	f001 f92c 	bl	80014f4 <modify_YELLOW>
								break;
 800029c:	e005      	b.n	80002aa <fsm_for_input_processing+0x14a>
								modify_GREEN();
 800029e:	f001 f94b 	bl	8001538 <modify_GREEN>
								break;
 80002a2:	e002      	b.n	80002aa <fsm_for_input_processing+0x14a>
					}
 80002a4:	bf00      	nop
 80002a6:	e028      	b.n	80002fa <fsm_for_input_processing+0x19a>
								break;
 80002a8:	bf00      	nop
				break ;
 80002aa:	e026      	b.n	80002fa <fsm_for_input_processing+0x19a>
				if (! is_button_pressed (BUTTON2)){
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 f913 	bl	80004d8 <is_button_pressed>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d105      	bne.n	80002c4 <fsm_for_input_processing+0x164>
					buttonState[i] = BUTTON_RELEASED ;
 80002b8:	4a45      	ldr	r2, [pc, #276]	; (80003d0 <fsm_for_input_processing+0x270>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4413      	add	r3, r2
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
				break ;
 80002c2:	e017      	b.n	80002f4 <fsm_for_input_processing+0x194>
					if( is_button_pressed_1s (BUTTON2) ){
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 f921 	bl	800050c <is_button_pressed_1s>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d011      	beq.n	80002f4 <fsm_for_input_processing+0x194>
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80002d0:	4a3f      	ldr	r2, [pc, #252]	; (80003d0 <fsm_for_input_processing+0x270>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	2202      	movs	r2, #2
 80002d8:	701a      	strb	r2, [r3, #0]
				break ;
 80002da:	e00b      	b.n	80002f4 <fsm_for_input_processing+0x194>
				if (! is_button_pressed (BUTTON2)){
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f8fb 	bl	80004d8 <is_button_pressed>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d107      	bne.n	80002f8 <fsm_for_input_processing+0x198>
					buttonState[i] = BUTTON_RELEASED ;
 80002e8:	4a39      	ldr	r2, [pc, #228]	; (80003d0 <fsm_for_input_processing+0x270>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
				break ;
 80002f2:	e001      	b.n	80002f8 <fsm_for_input_processing+0x198>
				break ;
 80002f4:	bf00      	nop
 80002f6:	e05c      	b.n	80003b2 <fsm_for_input_processing+0x252>
				break ;
 80002f8:	bf00      	nop
	break;
 80002fa:	e05a      	b.n	80003b2 <fsm_for_input_processing+0x252>
		switch ( buttonState[i] ){
 80002fc:	4a34      	ldr	r2, [pc, #208]	; (80003d0 <fsm_for_input_processing+0x270>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d03e      	beq.n	8000386 <fsm_for_input_processing+0x226>
 8000308:	2b02      	cmp	r3, #2
 800030a:	dc54      	bgt.n	80003b6 <fsm_for_input_processing+0x256>
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <fsm_for_input_processing+0x1b6>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d020      	beq.n	8000356 <fsm_for_input_processing+0x1f6>
	break;
 8000314:	e04f      	b.n	80003b6 <fsm_for_input_processing+0x256>
				if( is_button_pressed (BUTTON3)){
 8000316:	2002      	movs	r0, #2
 8000318:	f000 f8de 	bl	80004d8 <is_button_pressed>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d03d      	beq.n	800039e <fsm_for_input_processing+0x23e>
					buttonState[i] = BUTTON_PRESSED ;
 8000322:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <fsm_for_input_processing+0x270>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	2201      	movs	r2, #1
 800032a:	701a      	strb	r2, [r3, #0]
					if (modeBuffer != NORMAL_MODE && modeBuffer != WRONG_MODE){
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <fsm_for_input_processing+0x274>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d034      	beq.n	800039e <fsm_for_input_processing+0x23e>
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <fsm_for_input_processing+0x274>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b05      	cmp	r3, #5
 800033a:	d030      	beq.n	800039e <fsm_for_input_processing+0x23e>
						init_after_modifying();
 800033c:	f000 ff1a 	bl	8001174 <init_after_modifying>
						setTimer2(1010);
 8000340:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8000344:	f000 fd4a 	bl	8000ddc <setTimer2>
						setTimer1(10);
 8000348:	200a      	movs	r0, #10
 800034a:	f000 fd2d 	bl	8000da8 <setTimer1>
						modeBuffer = NORMAL_MODE;
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <fsm_for_input_processing+0x274>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
				break ;
 8000354:	e023      	b.n	800039e <fsm_for_input_processing+0x23e>
				if (! is_button_pressed (BUTTON3)){
 8000356:	2002      	movs	r0, #2
 8000358:	f000 f8be 	bl	80004d8 <is_button_pressed>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d105      	bne.n	800036e <fsm_for_input_processing+0x20e>
					buttonState[i] = BUTTON_RELEASED ;
 8000362:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <fsm_for_input_processing+0x270>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
				break ;
 800036c:	e019      	b.n	80003a2 <fsm_for_input_processing+0x242>
					if( is_button_pressed_1s (BUTTON3) ){
 800036e:	2002      	movs	r0, #2
 8000370:	f000 f8cc 	bl	800050c <is_button_pressed_1s>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d013      	beq.n	80003a2 <fsm_for_input_processing+0x242>
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <fsm_for_input_processing+0x270>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	2202      	movs	r2, #2
 8000382:	701a      	strb	r2, [r3, #0]
				break ;
 8000384:	e00d      	b.n	80003a2 <fsm_for_input_processing+0x242>
				if (! is_button_pressed (BUTTON3)){
 8000386:	2002      	movs	r0, #2
 8000388:	f000 f8a6 	bl	80004d8 <is_button_pressed>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d109      	bne.n	80003a6 <fsm_for_input_processing+0x246>
					buttonState[i] = BUTTON_RELEASED ;
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <fsm_for_input_processing+0x270>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
				break ;
 800039c:	e003      	b.n	80003a6 <fsm_for_input_processing+0x246>
				break ;
 800039e:	bf00      	nop
 80003a0:	e009      	b.n	80003b6 <fsm_for_input_processing+0x256>
				break ;
 80003a2:	bf00      	nop
 80003a4:	e007      	b.n	80003b6 <fsm_for_input_processing+0x256>
				break ;
 80003a6:	bf00      	nop
	break;
 80003a8:	e005      	b.n	80003b6 <fsm_for_input_processing+0x256>
		break;
 80003aa:	bf00      	nop
 80003ac:	e004      	b.n	80003b8 <fsm_for_input_processing+0x258>
		break;
 80003ae:	bf00      	nop
 80003b0:	e002      	b.n	80003b8 <fsm_for_input_processing+0x258>
	break;
 80003b2:	bf00      	nop
 80003b4:	e000      	b.n	80003b8 <fsm_for_input_processing+0x258>
	break;
 80003b6:	bf00      	nop
for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	f77f aed3 	ble.w	800016c <fsm_for_input_processing+0xc>
}

}
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000154 	.word	0x20000154
 80003d4:	20000157 	.word	0x20000157

080003d8 <button_reading>:
static uint8_t flagForButtonPress1s [ N0_OF_BUTTONS ];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s [ N0_OF_BUTTONS ];

void button_reading ( void ){
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
	for ( uint8_t i = 0; i < N0_OF_BUTTONS ; i ++){
 80003de:	2300      	movs	r3, #0
 80003e0:	71fb      	strb	r3, [r7, #7]
 80003e2:	e065      	b.n	80004b0 <button_reading+0xd8>
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	4935      	ldr	r1, [pc, #212]	; (80004c0 <button_reading+0xe8>)
 80003ea:	5c89      	ldrb	r1, [r1, r2]
 80003ec:	4a35      	ldr	r2, [pc, #212]	; (80004c4 <button_reading+0xec>)
 80003ee:	54d1      	strb	r1, [r2, r3]

		switch (i) {
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d01c      	beq.n	8000430 <button_reading+0x58>
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	dc25      	bgt.n	8000446 <button_reading+0x6e>
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <button_reading+0x2c>
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d00b      	beq.n	800041a <button_reading+0x42>
				break;
			case BUTTON3:
				debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_3_GPIO_Port , BUTTON_3_Pin );
				break;
			default:
				break;
 8000402:	e020      	b.n	8000446 <button_reading+0x6e>
				debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_1_GPIO_Port , BUTTON_1_Pin );
 8000404:	79fc      	ldrb	r4, [r7, #7]
 8000406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040a:	482f      	ldr	r0, [pc, #188]	; (80004c8 <button_reading+0xf0>)
 800040c:	f001 fc2c 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <button_reading+0xe8>)
 8000416:	551a      	strb	r2, [r3, r4]
				break;
 8000418:	e016      	b.n	8000448 <button_reading+0x70>
				debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_2_GPIO_Port , BUTTON_2_Pin );
 800041a:	79fc      	ldrb	r4, [r7, #7]
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	4829      	ldr	r0, [pc, #164]	; (80004c8 <button_reading+0xf0>)
 8000422:	f001 fc21 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000426:	4603      	mov	r3, r0
 8000428:	461a      	mov	r2, r3
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <button_reading+0xe8>)
 800042c:	551a      	strb	r2, [r3, r4]
				break;
 800042e:	e00b      	b.n	8000448 <button_reading+0x70>
				debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_3_GPIO_Port , BUTTON_3_Pin );
 8000430:	79fc      	ldrb	r4, [r7, #7]
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4824      	ldr	r0, [pc, #144]	; (80004c8 <button_reading+0xf0>)
 8000438:	f001 fc16 	bl	8001c68 <HAL_GPIO_ReadPin>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <button_reading+0xe8>)
 8000442:	551a      	strb	r2, [r3, r4]
				break;
 8000444:	e000      	b.n	8000448 <button_reading+0x70>
				break;
 8000446:	bf00      	nop
		}

		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i])
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <button_reading+0xe8>)
 800044c:	5cd2      	ldrb	r2, [r2, r3]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	491c      	ldr	r1, [pc, #112]	; (80004c4 <button_reading+0xec>)
 8000452:	5ccb      	ldrb	r3, [r1, r3]
 8000454:	429a      	cmp	r2, r3
 8000456:	d105      	bne.n	8000464 <button_reading+0x8c>
			buttonBuffer [i] = debounceButtonBuffer1 [i];
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	4918      	ldr	r1, [pc, #96]	; (80004c0 <button_reading+0xe8>)
 800045e:	5c89      	ldrb	r1, [r1, r2]
 8000460:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <button_reading+0xf4>)
 8000462:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	4a19      	ldr	r2, [pc, #100]	; (80004cc <button_reading+0xf4>)
 8000468:	5cd3      	ldrb	r3, [r2, r3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d114      	bne.n	8000498 <button_reading+0xc0>
			// if a button is pressed , we start counting
			if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <button_reading+0xf8>)
 8000472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000476:	2b63      	cmp	r3, #99	; 0x63
 8000478:	d809      	bhi.n	800048e <button_reading+0xb6>
				counterForButtonPress1s [i ]++;
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <button_reading+0xf8>)
 800047e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000482:	3201      	adds	r2, #1
 8000484:	b291      	uxth	r1, r2
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <button_reading+0xf8>)
 8000488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800048c:	e00d      	b.n	80004aa <button_reading+0xd2>
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s [i] = 1;
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <button_reading+0xfc>)
 8000492:	2101      	movs	r1, #1
 8000494:	54d1      	strb	r1, [r2, r3]
 8000496:	e008      	b.n	80004aa <button_reading+0xd2>
				// todo
			}
		} else {
			counterForButtonPress1s [i] = 0;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <button_reading+0xf8>)
 800049c:	2100      	movs	r1, #0
 800049e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s [i] = 0;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <button_reading+0xfc>)
 80004a6:	2100      	movs	r1, #0
 80004a8:	54d1      	strb	r1, [r2, r3]
	for ( uint8_t i = 0; i < N0_OF_BUTTONS ; i ++){
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	3301      	adds	r3, #1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d996      	bls.n	80003e4 <button_reading+0xc>
		}
	}
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	2000015c 	.word	0x2000015c
 80004c4:	20000160 	.word	0x20000160
 80004c8:	40010800 	.word	0x40010800
 80004cc:	20000158 	.word	0x20000158
 80004d0:	20000168 	.word	0x20000168
 80004d4:	20000164 	.word	0x20000164

080004d8 <is_button_pressed>:

uint8_t is_button_pressed ( uint8_t index ){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d901      	bls.n	80004ec <is_button_pressed+0x14>
 80004e8:	2300      	movs	r3, #0
 80004ea:	e007      	b.n	80004fc <is_button_pressed+0x24>
	return ( buttonBuffer [ index ] == BUTTON_IS_PRESSED );
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <is_button_pressed+0x30>)
 80004f0:	5cd3      	ldrb	r3, [r2, r3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	bf0c      	ite	eq
 80004f6:	2301      	moveq	r3, #1
 80004f8:	2300      	movne	r3, #0
 80004fa:	b2db      	uxtb	r3, r3
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000158 	.word	0x20000158

0800050c <is_button_pressed_1s>:

uint8_t is_button_pressed_1s ( unsigned char index ){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d901      	bls.n	8000520 <is_button_pressed_1s+0x14>
 800051c:	23ff      	movs	r3, #255	; 0xff
 800051e:	e007      	b.n	8000530 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [ index ] == 1);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <is_button_pressed_1s+0x30>)
 8000524:	5cd3      	ldrb	r3, [r2, r3]
 8000526:	2b01      	cmp	r3, #1
 8000528:	bf0c      	ite	eq
 800052a:	2301      	moveq	r3, #1
 800052c:	2300      	movne	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000164 	.word	0x20000164

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f001 f8a6 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f828 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8ae 	bl	80006ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000550:	f000 f860 	bl	8000614 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 8000554:	4810      	ldr	r0, [pc, #64]	; (8000598 <main+0x58>)
 8000556:	f002 f807 	bl	8002568 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  traffic_light_init();
 800055a:	f000 fd9f 	bl	800109c <traffic_light_init>

  setTimer2(1010);
 800055e:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8000562:	f000 fc3b 	bl	8000ddc <setTimer2>
  setTimer1(10);
 8000566:	200a      	movs	r0, #10
 8000568:	f000 fc1e 	bl	8000da8 <setTimer1>

  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 800056c:	f7ff fdf8 	bl	8000160 <fsm_for_input_processing>


	  if (get_flag_Timer2()){
 8000570:	f000 fc88 	bl	8000e84 <get_flag_Timer2>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <main+0x3e>
		  update_traffic_light();
 800057a:	f000 f90d 	bl	8000798 <update_traffic_light>
	  }

	  if (get_flag_Timer1()){
 800057e:	f000 fc75 	bl	8000e6c <get_flag_Timer1>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f1      	beq.n	800056c <main+0x2c>
		  scan_led_7seg();
 8000588:	f000 f994 	bl	80008b4 <scan_led_7seg>

		  setTimer1(500);
 800058c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000590:	f000 fc0a 	bl	8000da8 <setTimer1>
	  fsm_for_input_processing();
 8000594:	e7ea      	b.n	800056c <main+0x2c>
 8000596:	bf00      	nop
 8000598:	20000194 	.word	0x20000194

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b090      	sub	sp, #64	; 0x40
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	2228      	movs	r2, #40	; 0x28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fb94 	bl	8002cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb90 	bl	8001cf8 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005de:	f000 f8d5 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fdfc 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000606:	f000 f8c1 	bl	800078c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3740      	adds	r7, #64	; 0x40
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_TIM2_Init+0x94>)
 800063a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800063e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000648:	2209      	movs	r2, #9
 800064a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_TIM2_Init+0x94>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <MX_TIM2_Init+0x94>)
 800065a:	f001 ff35 	bl	80024c8 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000664:	f000 f892 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000676:	f002 f8cb 	bl	8002810 <HAL_TIM_ConfigClockSource>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 f884 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_TIM2_Init+0x94>)
 8000692:	f002 fa93 	bl	8002bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800069c:	f000 f876 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000194 	.word	0x20000194

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a22      	ldr	r2, [pc, #136]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_GPIO_Init+0xd4>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000708:	2200      	movs	r2, #0
 800070a:	f24c 71fe 	movw	r1, #51198	; 0xc7fe
 800070e:	481d      	ldr	r0, [pc, #116]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000710:	f001 fac1 	bl	8001c96 <HAL_GPIO_WritePin>
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000714:	2200      	movs	r2, #0
 8000716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800071a:	481b      	ldr	r0, [pc, #108]	; (8000788 <MX_GPIO_Init+0xdc>)
 800071c:	f001 fabb 	bl	8001c96 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin PA14 PA15 */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000720:	f24c 73fe 	movw	r3, #51198	; 0xc7fe
 8000724:	613b      	str	r3, [r7, #16]
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_GPIO_Init+0xd8>)
 800073a:	f001 f91b 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000758:	f001 f90c 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800075c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000772:	f001 f8ff 	bl	8001974 <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <update_traffic_light>:
#define MODIFY_GREEN	4

enum NUMBER {FIRST, SECOND};
enum NUMBER number_state = FIRST;

void update_traffic_light (void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
switch (get_mode()) {
 800079c:	f7ff fcd6 	bl	800014c <get_mode>
 80007a0:	4603      	mov	r3, r0
 80007a2:	3b01      	subs	r3, #1
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	f200 8080 	bhi.w	80008aa <update_traffic_light+0x112>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <update_traffic_light+0x18>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007d3 	.word	0x080007d3
 80007b8:	0800081b 	.word	0x0800081b
 80007bc:	08000863 	.word	0x08000863
	case NORMAL_MODE:
		traffic_light_update_1();
 80007c0:	f000 fd62 	bl	8001288 <traffic_light_update_1>
		traffic_light_update_2();
 80007c4:	f000 fde6 	bl	8001394 <traffic_light_update_2>

		setTimer2(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 fb06 	bl	8000ddc <setTimer2>
		break;
 80007d0:	e06c      	b.n	80008ac <update_traffic_light+0x114>

	case MODIFY_RED:
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80007d2:	2120      	movs	r1, #32
 80007d4:	4836      	ldr	r0, [pc, #216]	; (80008b0 <update_traffic_light+0x118>)
 80007d6:	f001 fa76 	bl	8001cc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	4834      	ldr	r0, [pc, #208]	; (80008b0 <update_traffic_light+0x118>)
 80007e0:	f001 fa71 	bl	8001cc6 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	4831      	ldr	r0, [pc, #196]	; (80008b0 <update_traffic_light+0x118>)
 80007ea:	f001 fa54 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	482e      	ldr	r0, [pc, #184]	; (80008b0 <update_traffic_light+0x118>)
 80007f6:	f001 fa4e 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	482c      	ldr	r0, [pc, #176]	; (80008b0 <update_traffic_light+0x118>)
 8000800:	f001 fa49 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080a:	4829      	ldr	r0, [pc, #164]	; (80008b0 <update_traffic_light+0x118>)
 800080c:	f001 fa43 	bl	8001c96 <HAL_GPIO_WritePin>

		setTimer2(500);
 8000810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000814:	f000 fae2 	bl	8000ddc <setTimer2>
		break;
 8000818:	e048      	b.n	80008ac <update_traffic_light+0x114>

	case MODIFY_YELLOW:
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4824      	ldr	r0, [pc, #144]	; (80008b0 <update_traffic_light+0x118>)
 800081e:	f001 fa52 	bl	8001cc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <update_traffic_light+0x118>)
 8000828:	f001 fa4d 	bl	8001cc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	481f      	ldr	r0, [pc, #124]	; (80008b0 <update_traffic_light+0x118>)
 8000832:	f001 fa30 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	481c      	ldr	r0, [pc, #112]	; (80008b0 <update_traffic_light+0x118>)
 800083e:	f001 fa2a 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	481a      	ldr	r0, [pc, #104]	; (80008b0 <update_traffic_light+0x118>)
 8000848:	f001 fa25 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4817      	ldr	r0, [pc, #92]	; (80008b0 <update_traffic_light+0x118>)
 8000854:	f001 fa1f 	bl	8001c96 <HAL_GPIO_WritePin>

		setTimer2(500);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 fabe 	bl	8000ddc <setTimer2>
		break;
 8000860:	e024      	b.n	80008ac <update_traffic_light+0x114>

	case MODIFY_GREEN:
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4812      	ldr	r0, [pc, #72]	; (80008b0 <update_traffic_light+0x118>)
 8000866:	f001 fa2e 	bl	8001cc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <update_traffic_light+0x118>)
 8000870:	f001 fa29 	bl	8001cc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <update_traffic_light+0x118>)
 800087a:	f001 fa0c 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <update_traffic_light+0x118>)
 8000886:	f001 fa06 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <update_traffic_light+0x118>)
 8000890:	f001 fa01 	bl	8001c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <update_traffic_light+0x118>)
 800089c:	f001 f9fb 	bl	8001c96 <HAL_GPIO_WritePin>

		setTimer2(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a4:	f000 fa9a 	bl	8000ddc <setTimer2>
		break;
 80008a8:	e000      	b.n	80008ac <update_traffic_light+0x114>

	default:
		break;
 80008aa:	bf00      	nop
}
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010800 	.word	0x40010800

080008b4 <scan_led_7seg>:

void scan_led_7seg(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	switch (get_mode()) {
 80008b8:	f7ff fc48 	bl	800014c <get_mode>
 80008bc:	4603      	mov	r3, r0
 80008be:	3b01      	subs	r3, #1
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	f200 81da 	bhi.w	8000c7a <scan_led_7seg+0x3c6>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <scan_led_7seg+0x18>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008dd 	.word	0x080008dd
 80008d0:	080009c1 	.word	0x080009c1
 80008d4:	08000aa5 	.word	0x08000aa5
 80008d8:	08000b89 	.word	0x08000b89
		case NORMAL_MODE:
			switch (number_state) {
 80008dc:	4bc6      	ldr	r3, [pc, #792]	; (8000bf8 <scan_led_7seg+0x344>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <scan_led_7seg+0x36>
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d030      	beq.n	800094a <scan_led_7seg+0x96>

					number_state = FIRST;
					break;
			}

			break;
 80008e8:	e1c8      	b.n	8000c7c <scan_led_7seg+0x3c8>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2104      	movs	r1, #4
 80008ee:	48c3      	ldr	r0, [pc, #780]	; (8000bfc <scan_led_7seg+0x348>)
 80008f0:	f001 f9d1 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	48c0      	ldr	r0, [pc, #768]	; (8000bfc <scan_led_7seg+0x348>)
 80008fa:	f001 f9cc 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_TIME_1()/10);
 80008fe:	f000 fe5b 	bl	80015b8 <get_TIME_1>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4bbe      	ldr	r3, [pc, #760]	; (8000c00 <scan_led_7seg+0x34c>)
 8000908:	fba3 2302 	umull	r2, r3, r3, r2
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fad5 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_TIME_2()/10);
 8000916:	f000 fe5b 	bl	80015d0 <get_TIME_2>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4bb8      	ldr	r3, [pc, #736]	; (8000c00 <scan_led_7seg+0x34c>)
 8000920:	fba3 2302 	umull	r2, r3, r3, r2
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fb3d 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	48b2      	ldr	r0, [pc, #712]	; (8000bfc <scan_led_7seg+0x348>)
 8000934:	f001 f9af 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	48af      	ldr	r0, [pc, #700]	; (8000bfc <scan_led_7seg+0x348>)
 800093e:	f001 f9aa 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = SECOND;
 8000942:	4bad      	ldr	r3, [pc, #692]	; (8000bf8 <scan_led_7seg+0x344>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
					break;
 8000948:	e039      	b.n	80009be <scan_led_7seg+0x10a>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2102      	movs	r1, #2
 800094e:	48ab      	ldr	r0, [pc, #684]	; (8000bfc <scan_led_7seg+0x348>)
 8000950:	f001 f9a1 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	48a8      	ldr	r0, [pc, #672]	; (8000bfc <scan_led_7seg+0x348>)
 800095a:	f001 f99c 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_TIME_1()%10);
 800095e:	f000 fe2b 	bl	80015b8 <get_TIME_1>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4ba6      	ldr	r3, [pc, #664]	; (8000c00 <scan_led_7seg+0x34c>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 faa0 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_TIME_2()%10);
 8000980:	f000 fe26 	bl	80015d0 <get_TIME_2>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b9d      	ldr	r3, [pc, #628]	; (8000c00 <scan_led_7seg+0x34c>)
 800098a:	fba3 1302 	umull	r1, r3, r3, r2
 800098e:	08d9      	lsrs	r1, r3, #3
 8000990:	460b      	mov	r3, r1
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fb03 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	4895      	ldr	r0, [pc, #596]	; (8000bfc <scan_led_7seg+0x348>)
 80009a8:	f001 f975 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2110      	movs	r1, #16
 80009b0:	4892      	ldr	r0, [pc, #584]	; (8000bfc <scan_led_7seg+0x348>)
 80009b2:	f001 f970 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = FIRST;
 80009b6:	4b90      	ldr	r3, [pc, #576]	; (8000bf8 <scan_led_7seg+0x344>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
					break;
 80009bc:	bf00      	nop
			break;
 80009be:	e15d      	b.n	8000c7c <scan_led_7seg+0x3c8>

		case MODIFY_RED:
			switch (number_state) {
 80009c0:	4b8d      	ldr	r3, [pc, #564]	; (8000bf8 <scan_led_7seg+0x344>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <scan_led_7seg+0x11a>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d030      	beq.n	8000a2e <scan_led_7seg+0x17a>

					number_state = FIRST;
					break;
			}

			break;
 80009cc:	e156      	b.n	8000c7c <scan_led_7seg+0x3c8>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2104      	movs	r1, #4
 80009d2:	488a      	ldr	r0, [pc, #552]	; (8000bfc <scan_led_7seg+0x348>)
 80009d4:	f001 f95f 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	4887      	ldr	r0, [pc, #540]	; (8000bfc <scan_led_7seg+0x348>)
 80009de:	f001 f95a 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_RED_DURATION()/10);
 80009e2:	f000 fe01 	bl	80015e8 <get_RED_DURATION>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b85      	ldr	r3, [pc, #532]	; (8000c00 <scan_led_7seg+0x34c>)
 80009ec:	fba3 2302 	umull	r2, r3, r3, r2
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fa63 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()/10);
 80009fa:	f7ff fba7 	bl	800014c <get_mode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b7f      	ldr	r3, [pc, #508]	; (8000c00 <scan_led_7seg+0x34c>)
 8000a04:	fba3 2302 	umull	r2, r3, r3, r2
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 facb 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	4879      	ldr	r0, [pc, #484]	; (8000bfc <scan_led_7seg+0x348>)
 8000a18:	f001 f93d 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2108      	movs	r1, #8
 8000a20:	4876      	ldr	r0, [pc, #472]	; (8000bfc <scan_led_7seg+0x348>)
 8000a22:	f001 f938 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = SECOND;
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <scan_led_7seg+0x344>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
					break;
 8000a2c:	e039      	b.n	8000aa2 <scan_led_7seg+0x1ee>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2102      	movs	r1, #2
 8000a32:	4872      	ldr	r0, [pc, #456]	; (8000bfc <scan_led_7seg+0x348>)
 8000a34:	f001 f92f 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	486f      	ldr	r0, [pc, #444]	; (8000bfc <scan_led_7seg+0x348>)
 8000a3e:	f001 f92a 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_RED_DURATION()%10);
 8000a42:	f000 fdd1 	bl	80015e8 <get_RED_DURATION>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b6d      	ldr	r3, [pc, #436]	; (8000c00 <scan_led_7seg+0x34c>)
 8000a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a50:	08d9      	lsrs	r1, r3, #3
 8000a52:	460b      	mov	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fa2e 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()%10);
 8000a64:	f7ff fb72 	bl	800014c <get_mode>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b64      	ldr	r3, [pc, #400]	; (8000c00 <scan_led_7seg+0x34c>)
 8000a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a72:	08d9      	lsrs	r1, r3, #3
 8000a74:	460b      	mov	r3, r1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fa91 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2104      	movs	r1, #4
 8000a8a:	485c      	ldr	r0, [pc, #368]	; (8000bfc <scan_led_7seg+0x348>)
 8000a8c:	f001 f903 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4859      	ldr	r0, [pc, #356]	; (8000bfc <scan_led_7seg+0x348>)
 8000a96:	f001 f8fe 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = FIRST;
 8000a9a:	4b57      	ldr	r3, [pc, #348]	; (8000bf8 <scan_led_7seg+0x344>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
					break;
 8000aa0:	bf00      	nop
			break;
 8000aa2:	e0eb      	b.n	8000c7c <scan_led_7seg+0x3c8>

		case MODIFY_YELLOW:
			switch (number_state) {
 8000aa4:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <scan_led_7seg+0x344>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <scan_led_7seg+0x1fe>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d030      	beq.n	8000b12 <scan_led_7seg+0x25e>

					number_state = FIRST;
					break;
			}

			break;
 8000ab0:	e0e4      	b.n	8000c7c <scan_led_7seg+0x3c8>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4851      	ldr	r0, [pc, #324]	; (8000bfc <scan_led_7seg+0x348>)
 8000ab8:	f001 f8ed 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2110      	movs	r1, #16
 8000ac0:	484e      	ldr	r0, [pc, #312]	; (8000bfc <scan_led_7seg+0x348>)
 8000ac2:	f001 f8e8 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_YELLOW_DURATION()/10);
 8000ac6:	f000 fd9f 	bl	8001608 <get_YELLOW_DURATION>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <scan_led_7seg+0x34c>)
 8000ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f9f1 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()/10);
 8000ade:	f7ff fb35 	bl	800014c <get_mode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <scan_led_7seg+0x34c>)
 8000ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa59 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	4840      	ldr	r0, [pc, #256]	; (8000bfc <scan_led_7seg+0x348>)
 8000afc:	f001 f8cb 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2108      	movs	r1, #8
 8000b04:	483d      	ldr	r0, [pc, #244]	; (8000bfc <scan_led_7seg+0x348>)
 8000b06:	f001 f8c6 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = SECOND;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <scan_led_7seg+0x344>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
					break;
 8000b10:	e039      	b.n	8000b86 <scan_led_7seg+0x2d2>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2102      	movs	r1, #2
 8000b16:	4839      	ldr	r0, [pc, #228]	; (8000bfc <scan_led_7seg+0x348>)
 8000b18:	f001 f8bd 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4836      	ldr	r0, [pc, #216]	; (8000bfc <scan_led_7seg+0x348>)
 8000b22:	f001 f8b8 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_YELLOW_DURATION()%10);
 8000b26:	f000 fd6f 	bl	8001608 <get_YELLOW_DURATION>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <scan_led_7seg+0x34c>)
 8000b30:	fba3 1302 	umull	r1, r3, r3, r2
 8000b34:	08d9      	lsrs	r1, r3, #3
 8000b36:	460b      	mov	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f9bc 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()%10);
 8000b48:	f7ff fb00 	bl	800014c <get_mode>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <scan_led_7seg+0x34c>)
 8000b52:	fba3 1302 	umull	r1, r3, r3, r2
 8000b56:	08d9      	lsrs	r1, r3, #3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa1f 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <scan_led_7seg+0x348>)
 8000b70:	f001 f891 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	4820      	ldr	r0, [pc, #128]	; (8000bfc <scan_led_7seg+0x348>)
 8000b7a:	f001 f88c 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = FIRST;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <scan_led_7seg+0x344>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
					break;
 8000b84:	bf00      	nop
			break;
 8000b86:	e079      	b.n	8000c7c <scan_led_7seg+0x3c8>

		case MODIFY_GREEN:
			switch (number_state) {
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <scan_led_7seg+0x344>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <scan_led_7seg+0x2e2>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d037      	beq.n	8000c04 <scan_led_7seg+0x350>

					number_state = FIRST;
					break;
			}

			break;
 8000b94:	e072      	b.n	8000c7c <scan_led_7seg+0x3c8>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <scan_led_7seg+0x348>)
 8000b9c:	f001 f87b 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4815      	ldr	r0, [pc, #84]	; (8000bfc <scan_led_7seg+0x348>)
 8000ba6:	f001 f876 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_GREEN_DURATION()/10);
 8000baa:	f000 fd3d 	bl	8001628 <get_GREEN_DURATION>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <scan_led_7seg+0x34c>)
 8000bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f97f 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()/10);
 8000bc2:	f7ff fac3 	bl	800014c <get_mode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <scan_led_7seg+0x34c>)
 8000bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f9e7 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <scan_led_7seg+0x348>)
 8000be0:	f001 f859 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2108      	movs	r1, #8
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <scan_led_7seg+0x348>)
 8000bea:	f001 f854 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = SECOND;
 8000bee:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <scan_led_7seg+0x344>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
					break;
 8000bf4:	e040      	b.n	8000c78 <scan_led_7seg+0x3c4>
 8000bf6:	bf00      	nop
 8000bf8:	2000016e 	.word	0x2000016e
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	cccccccd 	.word	0xcccccccd
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2102      	movs	r1, #2
 8000c08:	481d      	ldr	r0, [pc, #116]	; (8000c80 <scan_led_7seg+0x3cc>)
 8000c0a:	f001 f844 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2108      	movs	r1, #8
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <scan_led_7seg+0x3cc>)
 8000c14:	f001 f83f 	bl	8001c96 <HAL_GPIO_WritePin>
					display7SEG_1(get_GREEN_DURATION()%10);
 8000c18:	f000 fd06 	bl	8001628 <get_GREEN_DURATION>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <scan_led_7seg+0x3d0>)
 8000c22:	fba3 1302 	umull	r1, r3, r3, r2
 8000c26:	08d9      	lsrs	r1, r3, #3
 8000c28:	460b      	mov	r3, r1
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f943 	bl	8000ec0 <display7SEG_1>
					display7SEG_2(get_mode()%10);
 8000c3a:	f7ff fa87 	bl	800014c <get_mode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <scan_led_7seg+0x3d0>)
 8000c44:	fba3 1302 	umull	r1, r3, r3, r2
 8000c48:	08d9      	lsrs	r1, r3, #3
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f9a6 	bl	8000fa8 <display7SEG_2>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <scan_led_7seg+0x3cc>)
 8000c62:	f001 f818 	bl	8001c96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <scan_led_7seg+0x3cc>)
 8000c6c:	f001 f813 	bl	8001c96 <HAL_GPIO_WritePin>
					number_state = FIRST;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <scan_led_7seg+0x3d4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
					break;
 8000c76:	bf00      	nop
			break;
 8000c78:	e000      	b.n	8000c7c <scan_led_7seg+0x3c8>

		default:
			break;
 8000c7a:	bf00      	nop
	}

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010800 	.word	0x40010800
 8000c84:	cccccccd 	.word	0xcccccccd
 8000c88:	2000016e 	.word	0x2000016e

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_MspInit+0x60>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_MspInit+0x60>)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000

08000cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d00:	d113      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_TIM_Base_MspInit+0x44>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_TIM_Base_MspInit+0x44>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201c      	movs	r0, #28
 8000d20:	f000 fdf1 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d24:	201c      	movs	r0, #28
 8000d26:	f000 fe0a 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 fccf 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM2_IRQHandler+0x10>)
 8000d8e:	f001 fc37 	bl	8002600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000194 	.word	0x20000194

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <setTimer1>:
static int timer2_counter = 0;
static int timer2_flag = 0;

static int TIMER_CYCLE = 10;

void setTimer1 (int duration){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <setTimer1+0x28>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <setTimer1+0x2c>)
 8000dbc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <setTimer1+0x30>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	20000170 	.word	0x20000170
 8000dd8:	20000174 	.word	0x20000174

08000ddc <setTimer2>:

void setTimer2 (int duration){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <setTimer2+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dee:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <setTimer2+0x2c>)
 8000df0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <setTimer2+0x30>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000178 	.word	0x20000178
 8000e0c:	2000017c 	.word	0x2000017c

08000e10 <timer_run>:

void timer_run(){
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <timer_run+0x4c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd0b      	ble.n	8000e34 <timer_run+0x24>
			timer1_counter --;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <timer_run+0x4c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <timer_run+0x4c>)
 8000e24:	6013      	str	r3, [r2, #0]

			if( timer1_counter == 0){
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <timer_run+0x4c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <timer_run+0x24>
				timer1_flag = 1;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <timer_run+0x50>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
			}
	}

	if(timer2_counter > 0){
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <timer_run+0x54>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dd0b      	ble.n	8000e54 <timer_run+0x44>
			timer2_counter --;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <timer_run+0x54>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <timer_run+0x54>)
 8000e44:	6013      	str	r3, [r2, #0]

			if( timer2_counter == 0){
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <timer_run+0x54>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <timer_run+0x44>
				timer2_flag = 1;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <timer_run+0x58>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
			}
	}
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000170 	.word	0x20000170
 8000e60:	20000174 	.word	0x20000174
 8000e64:	20000178 	.word	0x20000178
 8000e68:	2000017c 	.word	0x2000017c

08000e6c <get_flag_Timer1>:


uint8_t get_flag_Timer1(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	return timer1_flag;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <get_flag_Timer1+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000174 	.word	0x20000174

08000e84 <get_flag_Timer2>:

uint8_t get_flag_Timer2(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	return timer2_flag;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <get_flag_Timer2+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000017c 	.word	0x2000017c

08000e9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eac:	d103      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timer_run();
 8000eae:	f7ff ffaf 	bl	8000e10 <timer_run>
		button_reading();
 8000eb2:	f7ff fa91 	bl	80003d8 <button_reading>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <display7SEG_1>:
		{0,0,0,0,0,0,0},
		{0,0,0,0,1,0,0},
};

void display7SEG_1(int num)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, NUM[num][0]);
 8000ec8:	4935      	ldr	r1, [pc, #212]	; (8000fa0 <display7SEG_1+0xe0>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2101      	movs	r1, #1
 8000ede:	4831      	ldr	r0, [pc, #196]	; (8000fa4 <display7SEG_1+0xe4>)
 8000ee0:	f000 fed9 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, NUM[num][1]);
 8000ee4:	492e      	ldr	r1, [pc, #184]	; (8000fa0 <display7SEG_1+0xe0>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2102      	movs	r1, #2
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <display7SEG_1+0xe4>)
 8000efe:	f000 feca 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, NUM[num][2]);
 8000f02:	4927      	ldr	r1, [pc, #156]	; (8000fa0 <display7SEG_1+0xe0>)
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3308      	adds	r3, #8
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <display7SEG_1+0xe4>)
 8000f1c:	f000 febb 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, NUM[num][3]);
 8000f20:	491f      	ldr	r1, [pc, #124]	; (8000fa0 <display7SEG_1+0xe0>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	330c      	adds	r3, #12
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	2108      	movs	r1, #8
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <display7SEG_1+0xe4>)
 8000f3a:	f000 feac 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, NUM[num][4]);
 8000f3e:	4918      	ldr	r1, [pc, #96]	; (8000fa0 <display7SEG_1+0xe0>)
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	2110      	movs	r1, #16
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <display7SEG_1+0xe4>)
 8000f58:	f000 fe9d 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, NUM[num][5]);
 8000f5c:	4910      	ldr	r1, [pc, #64]	; (8000fa0 <display7SEG_1+0xe0>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	2120      	movs	r1, #32
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <display7SEG_1+0xe4>)
 8000f76:	f000 fe8e 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, NUM[num][6]);
 8000f7a:	4909      	ldr	r1, [pc, #36]	; (8000fa0 <display7SEG_1+0xe0>)
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3318      	adds	r3, #24
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <display7SEG_1+0xe4>)
 8000f94:	f000 fe7f 	bl	8001c96 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <display7SEG_2>:

void display7SEG_2(int num)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, NUM[num][0]);
 8000fb0:	4938      	ldr	r1, [pc, #224]	; (8001094 <display7SEG_2+0xec>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	4834      	ldr	r0, [pc, #208]	; (8001098 <display7SEG_2+0xf0>)
 8000fc8:	f000 fe65 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, NUM[num][1]);
 8000fcc:	4931      	ldr	r1, [pc, #196]	; (8001094 <display7SEG_2+0xec>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3304      	adds	r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe6:	482c      	ldr	r0, [pc, #176]	; (8001098 <display7SEG_2+0xf0>)
 8000fe8:	f000 fe55 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, NUM[num][2]);
 8000fec:	4929      	ldr	r1, [pc, #164]	; (8001094 <display7SEG_2+0xec>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001006:	4824      	ldr	r0, [pc, #144]	; (8001098 <display7SEG_2+0xf0>)
 8001008:	f000 fe45 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, NUM[num][3]);
 800100c:	4921      	ldr	r1, [pc, #132]	; (8001094 <display7SEG_2+0xec>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	330c      	adds	r3, #12
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <display7SEG_2+0xf0>)
 8001028:	f000 fe35 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, NUM[num][4]);
 800102c:	4919      	ldr	r1, [pc, #100]	; (8001094 <display7SEG_2+0xec>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3310      	adds	r3, #16
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <display7SEG_2+0xf0>)
 8001048:	f000 fe25 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, NUM[num][5]);
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <display7SEG_2+0xec>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3314      	adds	r3, #20
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <display7SEG_2+0xf0>)
 8001068:	f000 fe15 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, NUM[num][6]);
 800106c:	4909      	ldr	r1, [pc, #36]	; (8001094 <display7SEG_2+0xec>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3318      	adds	r3, #24
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <display7SEG_2+0xf0>)
 8001088:	f000 fe05 	bl	8001c96 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000018 	.word	0x20000018
 8001098:	40010c00 	.word	0x40010c00

0800109c <traffic_light_init>:

// THIS FUNCTION WAS CALLED TO INITIAL TRAFFIC LIGHT
void traffic_light_init(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	RED_DELTA[0] = 0;
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <traffic_light_init+0xb4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	RED_DELTA[1] = 0;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <traffic_light_init+0xb4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	705a      	strb	r2, [r3, #1]
	YELLOW_DELTA[0] = 0;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <traffic_light_init+0xb8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	YELLOW_DELTA[1] = 0;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <traffic_light_init+0xb8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	705a      	strb	r2, [r3, #1]
	GREEN_DELTA[0] = 0;
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <traffic_light_init+0xbc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	GREEN_DELTA[1] = 0;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <traffic_light_init+0xbc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	705a      	strb	r2, [r3, #1]

	RED_DURATION[0] 	= 5;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <traffic_light_init+0xc0>)
 80010c6:	2205      	movs	r2, #5
 80010c8:	701a      	strb	r2, [r3, #0]
	YELLOW_DURATION[0] 	= 2;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <traffic_light_init+0xc4>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
	GREEN_DURATION[0] 	= 3;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <traffic_light_init+0xc8>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]

	RED_DURATION[1] 	= 5;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <traffic_light_init+0xc0>)
 80010d8:	2205      	movs	r2, #5
 80010da:	705a      	strb	r2, [r3, #1]
	YELLOW_DURATION[1] 	= 2;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <traffic_light_init+0xc4>)
 80010de:	2202      	movs	r2, #2
 80010e0:	705a      	strb	r2, [r3, #1]
	GREEN_DURATION[1] 	= 3;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <traffic_light_init+0xc8>)
 80010e4:	2203      	movs	r2, #3
 80010e6:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	481e      	ldr	r0, [pc, #120]	; (8001168 <traffic_light_init+0xcc>)
 80010ee:	f000 fdd2 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <traffic_light_init+0xcc>)
 80010f8:	f000 fdcd 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <traffic_light_init+0xcc>)
 8001102:	f000 fdc8 	bl	8001c96 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <traffic_light_init+0xcc>)
 800110e:	f000 fdc2 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <traffic_light_init+0xcc>)
 800111a:	f000 fdbc 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <traffic_light_init+0xcc>)
 8001126:	f000 fdb6 	bl	8001c96 <HAL_GPIO_WritePin>

	light_State[0] 		= RED;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <traffic_light_init+0xd0>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	time_in_State[0] 	= RED_DURATION[0];
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <traffic_light_init+0xc0>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <traffic_light_init+0xd4>)
 8001138:	601a      	str	r2, [r3, #0]

	light_State[1] 		= GREEN;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <traffic_light_init+0xd0>)
 800113c:	2202      	movs	r2, #2
 800113e:	705a      	strb	r2, [r3, #1]
	time_in_State[1] 	= GREEN_DURATION[1];
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <traffic_light_init+0xc8>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	461a      	mov	r2, r3
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <traffic_light_init+0xd4>)
 8001148:	605a      	str	r2, [r3, #4]
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000188 	.word	0x20000188
 8001154:	2000018c 	.word	0x2000018c
 8001158:	20000190 	.word	0x20000190
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000010 	.word	0x20000010
 8001164:	20000014 	.word	0x20000014
 8001168:	40010800 	.word	0x40010800
 800116c:	20000008 	.word	0x20000008
 8001170:	20000180 	.word	0x20000180

08001174 <init_after_modifying>:

void init_after_modifying(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	RED_DURATION[0] 	= RED_DURATION[0] 		+ RED_DELTA[0];
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <init_after_modifying+0xf0>)
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <init_after_modifying+0xf4>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <init_after_modifying+0xf0>)
 8001186:	701a      	strb	r2, [r3, #0]
	YELLOW_DURATION[0] 	= YELLOW_DURATION[0] 	+ YELLOW_DELTA[0];
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <init_after_modifying+0xf8>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <init_after_modifying+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <init_after_modifying+0xf8>)
 8001196:	701a      	strb	r2, [r3, #0]
	GREEN_DURATION[0] 	= GREEN_DURATION[0] 	+ GREEN_DELTA[0];
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <init_after_modifying+0x100>)
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <init_after_modifying+0x104>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <init_after_modifying+0x100>)
 80011a6:	701a      	strb	r2, [r3, #0]

	RED_DURATION[1] 	= RED_DURATION[1] 		+ RED_DELTA[1];
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <init_after_modifying+0xf0>)
 80011aa:	785a      	ldrb	r2, [r3, #1]
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <init_after_modifying+0xf4>)
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <init_after_modifying+0xf0>)
 80011b6:	705a      	strb	r2, [r3, #1]
	YELLOW_DURATION[1] 	= YELLOW_DURATION[1] 	+ YELLOW_DELTA[1];
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <init_after_modifying+0xf8>)
 80011ba:	785a      	ldrb	r2, [r3, #1]
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <init_after_modifying+0xfc>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <init_after_modifying+0xf8>)
 80011c6:	705a      	strb	r2, [r3, #1]
	GREEN_DURATION[1] 	= GREEN_DURATION[1] 	+ GREEN_DELTA[1];
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <init_after_modifying+0x100>)
 80011ca:	785a      	ldrb	r2, [r3, #1]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <init_after_modifying+0x104>)
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	4413      	add	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <init_after_modifying+0x100>)
 80011d6:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <init_after_modifying+0x108>)
 80011de:	f000 fd5a 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	4825      	ldr	r0, [pc, #148]	; (800127c <init_after_modifying+0x108>)
 80011e8:	f000 fd55 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	4822      	ldr	r0, [pc, #136]	; (800127c <init_after_modifying+0x108>)
 80011f2:	f000 fd50 	bl	8001c96 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <init_after_modifying+0x108>)
 80011fe:	f000 fd4a 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <init_after_modifying+0x108>)
 800120a:	f000 fd44 	bl	8001c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001214:	4819      	ldr	r0, [pc, #100]	; (800127c <init_after_modifying+0x108>)
 8001216:	f000 fd3e 	bl	8001c96 <HAL_GPIO_WritePin>

	light_State[0] 		= RED;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <init_after_modifying+0x10c>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
	time_in_State[0] 	= RED_DURATION[0];
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <init_after_modifying+0xf0>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <init_after_modifying+0x110>)
 8001228:	601a      	str	r2, [r3, #0]

	light_State[1] 		= GREEN;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <init_after_modifying+0x10c>)
 800122c:	2202      	movs	r2, #2
 800122e:	705a      	strb	r2, [r3, #1]
	time_in_State[1] 	= GREEN_DURATION[1];
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <init_after_modifying+0x100>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	461a      	mov	r2, r3
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <init_after_modifying+0x110>)
 8001238:	605a      	str	r2, [r3, #4]

	RED_DELTA[0] 		= 0;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <init_after_modifying+0xf4>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
	YELLOW_DELTA[0] 	= 0;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <init_after_modifying+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	GREEN_DELTA[0] 		= 0;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <init_after_modifying+0x104>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	RED_DELTA[1] 		= 0;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <init_after_modifying+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	705a      	strb	r2, [r3, #1]
	YELLOW_DELTA[1] 	= 0;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <init_after_modifying+0xfc>)
 8001254:	2200      	movs	r2, #0
 8001256:	705a      	strb	r2, [r3, #1]
	GREEN_DELTA[1] 		= 0;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <init_after_modifying+0x104>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000000c 	.word	0x2000000c
 8001268:	20000188 	.word	0x20000188
 800126c:	20000010 	.word	0x20000010
 8001270:	2000018c 	.word	0x2000018c
 8001274:	20000014 	.word	0x20000014
 8001278:	20000190 	.word	0x20000190
 800127c:	40010800 	.word	0x40010800
 8001280:	20000008 	.word	0x20000008
 8001284:	20000180 	.word	0x20000180

08001288 <traffic_light_update_1>:

// THIS FUNCTION WAS CALLED AFTER 1s
void traffic_light_update_1(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
switch (light_State[0]) {
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <traffic_light_update_1+0xf4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d027      	beq.n	80012e4 <traffic_light_update_1+0x5c>
 8001294:	2b02      	cmp	r3, #2
 8001296:	dc67      	bgt.n	8001368 <traffic_light_update_1+0xe0>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <traffic_light_update_1+0x1a>
 800129c:	2b01      	cmp	r3, #1
 800129e:	d042      	beq.n	8001326 <traffic_light_update_1+0x9e>

		break;


	default:
		break;
 80012a0:	e062      	b.n	8001368 <traffic_light_update_1+0xe0>
		if (--time_in_State[0] == 0){
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <traffic_light_update_1+0xf8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a35      	ldr	r2, [pc, #212]	; (8001380 <traffic_light_update_1+0xf8>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <traffic_light_update_1+0xf8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d15b      	bne.n	800136c <traffic_light_update_1+0xe4>
			time_in_State[0] = GREEN_DURATION[0];
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <traffic_light_update_1+0xfc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <traffic_light_update_1+0xf8>)
 80012bc:	601a      	str	r2, [r3, #0]
			light_State[0] = GREEN;
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <traffic_light_update_1+0xf4>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RED1_GPIO_Port, 		RED1_Pin, 		1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	482f      	ldr	r0, [pc, #188]	; (8001388 <traffic_light_update_1+0x100>)
 80012ca:	f000 fce4 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, 	YELLOW1_Pin, 	1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	482d      	ldr	r0, [pc, #180]	; (8001388 <traffic_light_update_1+0x100>)
 80012d4:	f000 fcdf 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, 	GREEN1_Pin, 	0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <traffic_light_update_1+0x100>)
 80012de:	f000 fcda 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 80012e2:	e043      	b.n	800136c <traffic_light_update_1+0xe4>
		if (--time_in_State[0] == 0){
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <traffic_light_update_1+0xf8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a25      	ldr	r2, [pc, #148]	; (8001380 <traffic_light_update_1+0xf8>)
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <traffic_light_update_1+0xf8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13c      	bne.n	8001370 <traffic_light_update_1+0xe8>
			time_in_State[0] = YELLOW_DURATION[0];
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <traffic_light_update_1+0x104>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <traffic_light_update_1+0xf8>)
 80012fe:	601a      	str	r2, [r3, #0]
			light_State[0] = YELLOW;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <traffic_light_update_1+0xf4>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RED1_GPIO_Port, 		RED1_Pin, 		1);
 8001306:	2201      	movs	r2, #1
 8001308:	2120      	movs	r1, #32
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <traffic_light_update_1+0x100>)
 800130c:	f000 fcc3 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, 	GREEN1_Pin, 	1);
 8001310:	2201      	movs	r2, #1
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <traffic_light_update_1+0x100>)
 8001316:	f000 fcbe 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, 	YELLOW1_Pin, 	0);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <traffic_light_update_1+0x100>)
 8001320:	f000 fcb9 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 8001324:	e024      	b.n	8001370 <traffic_light_update_1+0xe8>
		if (--time_in_State[0] == 0){
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <traffic_light_update_1+0xf8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <traffic_light_update_1+0xf8>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <traffic_light_update_1+0xf8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11d      	bne.n	8001374 <traffic_light_update_1+0xec>
			time_in_State[0] = RED_DURATION[0];
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <traffic_light_update_1+0x108>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <traffic_light_update_1+0xf8>)
 8001340:	601a      	str	r2, [r3, #0]
			light_State[0] = RED;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <traffic_light_update_1+0xf4>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, 	YELLOW1_Pin, 	1);
 8001348:	2201      	movs	r2, #1
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <traffic_light_update_1+0x100>)
 800134e:	f000 fca2 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, 	GREEN1_Pin, 	1);
 8001352:	2201      	movs	r2, #1
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <traffic_light_update_1+0x100>)
 8001358:	f000 fc9d 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, 		RED1_Pin, 		0);
 800135c:	2200      	movs	r2, #0
 800135e:	2120      	movs	r1, #32
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <traffic_light_update_1+0x100>)
 8001362:	f000 fc98 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 8001366:	e005      	b.n	8001374 <traffic_light_update_1+0xec>
		break;
 8001368:	bf00      	nop
 800136a:	e004      	b.n	8001376 <traffic_light_update_1+0xee>
		break;
 800136c:	bf00      	nop
 800136e:	e002      	b.n	8001376 <traffic_light_update_1+0xee>
		break;
 8001370:	bf00      	nop
 8001372:	e000      	b.n	8001376 <traffic_light_update_1+0xee>
		break;
 8001374:	bf00      	nop
}
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	20000180 	.word	0x20000180
 8001384:	20000014 	.word	0x20000014
 8001388:	40010800 	.word	0x40010800
 800138c:	20000010 	.word	0x20000010
 8001390:	2000000c 	.word	0x2000000c

08001394 <traffic_light_update_2>:

// THIS FUNCTION WAS CALLED AFTER 1s
void traffic_light_update_2(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
switch (light_State[1]) {
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <traffic_light_update_2+0x104>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d02a      	beq.n	80013f6 <traffic_light_update_2+0x62>
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dc70      	bgt.n	8001486 <traffic_light_update_2+0xf2>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <traffic_light_update_2+0x1a>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d048      	beq.n	800143e <traffic_light_update_2+0xaa>
		}

		break;

	default:
		break;
 80013ac:	e06b      	b.n	8001486 <traffic_light_update_2+0xf2>
		if (--time_in_State[1] == 0){
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <traffic_light_update_2+0x108>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	4a39      	ldr	r2, [pc, #228]	; (800149c <traffic_light_update_2+0x108>)
 80013b6:	6053      	str	r3, [r2, #4]
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <traffic_light_update_2+0x108>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d164      	bne.n	800148a <traffic_light_update_2+0xf6>
			time_in_State[1] = GREEN_DURATION[1];
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <traffic_light_update_2+0x10c>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <traffic_light_update_2+0x108>)
 80013c8:	605a      	str	r2, [r3, #4]
			light_State[1] = GREEN;
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <traffic_light_update_2+0x104>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(RED2_GPIO_Port, 		RED2_Pin, 		1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	4833      	ldr	r0, [pc, #204]	; (80014a4 <traffic_light_update_2+0x110>)
 80013d8:	f000 fc5d 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, 	YELLOW2_Pin, 	1);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e2:	4830      	ldr	r0, [pc, #192]	; (80014a4 <traffic_light_update_2+0x110>)
 80013e4:	f000 fc57 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, 	GREEN2_Pin, 	0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <traffic_light_update_2+0x110>)
 80013f0:	f000 fc51 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 80013f4:	e049      	b.n	800148a <traffic_light_update_2+0xf6>
		if (--time_in_State[1] == 0){
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <traffic_light_update_2+0x108>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <traffic_light_update_2+0x108>)
 80013fe:	6053      	str	r3, [r2, #4]
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <traffic_light_update_2+0x108>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d142      	bne.n	800148e <traffic_light_update_2+0xfa>
			time_in_State[1] = YELLOW_DURATION[1];
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <traffic_light_update_2+0x114>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	461a      	mov	r2, r3
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <traffic_light_update_2+0x108>)
 8001410:	605a      	str	r2, [r3, #4]
			light_State[1] = YELLOW;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <traffic_light_update_2+0x104>)
 8001414:	2201      	movs	r2, #1
 8001416:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(RED2_GPIO_Port, 		RED2_Pin, 		1);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <traffic_light_update_2+0x110>)
 8001420:	f000 fc39 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, 	GREEN2_Pin, 	1);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	481e      	ldr	r0, [pc, #120]	; (80014a4 <traffic_light_update_2+0x110>)
 800142c:	f000 fc33 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, 	YELLOW2_Pin, 	0);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <traffic_light_update_2+0x110>)
 8001438:	f000 fc2d 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 800143c:	e027      	b.n	800148e <traffic_light_update_2+0xfa>
		if (--time_in_State[1] == 0){
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <traffic_light_update_2+0x108>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	4a15      	ldr	r2, [pc, #84]	; (800149c <traffic_light_update_2+0x108>)
 8001446:	6053      	str	r3, [r2, #4]
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <traffic_light_update_2+0x108>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d120      	bne.n	8001492 <traffic_light_update_2+0xfe>
			light_State[1] = RED;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <traffic_light_update_2+0x104>)
 8001452:	2200      	movs	r2, #0
 8001454:	705a      	strb	r2, [r3, #1]
			time_in_State[1] = RED_DURATION[1];
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <traffic_light_update_2+0x118>)
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	461a      	mov	r2, r3
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <traffic_light_update_2+0x108>)
 800145e:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, 	YELLOW2_Pin, 	1);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	480f      	ldr	r0, [pc, #60]	; (80014a4 <traffic_light_update_2+0x110>)
 8001468:	f000 fc15 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, 	GREEN2_Pin, 	1);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <traffic_light_update_2+0x110>)
 8001474:	f000 fc0f 	bl	8001c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, 		RED2_Pin, 		0);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <traffic_light_update_2+0x110>)
 8001480:	f000 fc09 	bl	8001c96 <HAL_GPIO_WritePin>
		break;
 8001484:	e005      	b.n	8001492 <traffic_light_update_2+0xfe>
		break;
 8001486:	bf00      	nop
 8001488:	e004      	b.n	8001494 <traffic_light_update_2+0x100>
		break;
 800148a:	bf00      	nop
 800148c:	e002      	b.n	8001494 <traffic_light_update_2+0x100>
		break;
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <traffic_light_update_2+0x100>
		break;
 8001492:	bf00      	nop
}
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000008 	.word	0x20000008
 800149c:	20000180 	.word	0x20000180
 80014a0:	20000014 	.word	0x20000014
 80014a4:	40010800 	.word	0x40010800
 80014a8:	20000010 	.word	0x20000010
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <modify_RED>:

void modify_RED (void){
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	if (RED_DURATION[0] + RED_DELTA[0] > 99){
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <modify_RED+0x38>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <modify_RED+0x3c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	2b63      	cmp	r3, #99	; 0x63
 80014c2:	dc0c      	bgt.n	80014de <modify_RED+0x2e>
		return;;
	}

	RED_DELTA[0]++;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <modify_RED+0x3c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <modify_RED+0x3c>)
 80014ce:	701a      	strb	r2, [r3, #0]
	GREEN_DELTA[1]++;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <modify_RED+0x40>)
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <modify_RED+0x40>)
 80014da:	705a      	strb	r2, [r3, #1]
 80014dc:	e000      	b.n	80014e0 <modify_RED+0x30>
		return;;
 80014de:	bf00      	nop
}
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000188 	.word	0x20000188
 80014f0:	20000190 	.word	0x20000190

080014f4 <modify_YELLOW>:
void modify_YELLOW (void){
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
	if (YELLOW_DURATION[0] + YELLOW_DELTA[0]> 99){
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <modify_YELLOW+0x38>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <modify_YELLOW+0x3c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	2b63      	cmp	r3, #99	; 0x63
 8001506:	dc0c      	bgt.n	8001522 <modify_YELLOW+0x2e>
		 return;
	}

	YELLOW_DELTA[0]++;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <modify_YELLOW+0x3c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <modify_YELLOW+0x3c>)
 8001512:	701a      	strb	r2, [r3, #0]
	RED_DELTA[1]++;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <modify_YELLOW+0x40>)
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <modify_YELLOW+0x40>)
 800151e:	705a      	strb	r2, [r3, #1]
 8001520:	e000      	b.n	8001524 <modify_YELLOW+0x30>
		 return;
 8001522:	bf00      	nop
}
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000010 	.word	0x20000010
 8001530:	2000018c 	.word	0x2000018c
 8001534:	20000188 	.word	0x20000188

08001538 <modify_GREEN>:
void modify_GREEN (void){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	if (GREEN_DURATION[0] + GREEN_DELTA[0] > 99){
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <modify_GREEN+0x38>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <modify_GREEN+0x3c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	2b63      	cmp	r3, #99	; 0x63
 800154a:	dc0c      	bgt.n	8001566 <modify_GREEN+0x2e>
		 return;
	}

	GREEN_DELTA[0]++;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <modify_GREEN+0x3c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <modify_GREEN+0x3c>)
 8001556:	701a      	strb	r2, [r3, #0]
	RED_DELTA[1]++;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <modify_GREEN+0x40>)
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <modify_GREEN+0x40>)
 8001562:	705a      	strb	r2, [r3, #1]
 8001564:	e000      	b.n	8001568 <modify_GREEN+0x30>
		 return;
 8001566:	bf00      	nop
}
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000014 	.word	0x20000014
 8001574:	20000190 	.word	0x20000190
 8001578:	20000188 	.word	0x20000188

0800157c <reset_DELTA>:
void reset_DELTA(void) {
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
	RED_DELTA[0] 		= 0;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <reset_DELTA+0x30>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	YELLOW_DELTA[0] 	= 0;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <reset_DELTA+0x34>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
	GREEN_DELTA[0] 		= 0;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <reset_DELTA+0x38>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	RED_DELTA[1] 		= 0;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <reset_DELTA+0x30>)
 8001594:	2200      	movs	r2, #0
 8001596:	705a      	strb	r2, [r3, #1]
	YELLOW_DELTA[1] 	= 0;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <reset_DELTA+0x34>)
 800159a:	2200      	movs	r2, #0
 800159c:	705a      	strb	r2, [r3, #1]
	GREEN_DELTA[1] 		= 0;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <reset_DELTA+0x38>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	705a      	strb	r2, [r3, #1]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000188 	.word	0x20000188
 80015b0:	2000018c 	.word	0x2000018c
 80015b4:	20000190 	.word	0x20000190

080015b8 <get_TIME_1>:

uint8_t get_TIME_1(void){
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	return time_in_State[0];
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <get_TIME_1+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000180 	.word	0x20000180

080015d0 <get_TIME_2>:
uint8_t get_TIME_2(void){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	return time_in_State[1];
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <get_TIME_2+0x14>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	b2db      	uxtb	r3, r3
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000180 	.word	0x20000180

080015e8 <get_RED_DURATION>:

uint8_t get_RED_DURATION(void){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return RED_DURATION[0] 		+ 	RED_DELTA[0];
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <get_RED_DURATION+0x18>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <get_RED_DURATION+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000188 	.word	0x20000188

08001608 <get_YELLOW_DURATION>:

uint8_t get_YELLOW_DURATION(void){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	return YELLOW_DURATION[0] 	+ 	YELLOW_DELTA[0];
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <get_YELLOW_DURATION+0x18>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <get_YELLOW_DURATION+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4413      	add	r3, r2
 8001616:	b2db      	uxtb	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000010 	.word	0x20000010
 8001624:	2000018c 	.word	0x2000018c

08001628 <get_GREEN_DURATION>:

uint8_t get_GREEN_DURATION(void){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return GREEN_DURATION[0] 	+ 	GREEN_DELTA[0];
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <get_GREEN_DURATION+0x18>)
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <get_GREEN_DURATION+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4413      	add	r3, r2
 8001636:	b2db      	uxtb	r3, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000014 	.word	0x20000014
 8001644:	20000190 	.word	0x20000190

08001648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	; (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800166e:	f7ff fb95 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f001 fb0d 	bl	8002c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7fe ff63 	bl	8000540 <main>
  bx lr
 800167a:	4770      	bx	lr
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001684:	08002d28 	.word	0x08002d28
  ldr r2, =_sbss
 8001688:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800168c:	200001e0 	.word	0x200001e0

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x28>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x28>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f923 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff faec 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f93b 	bl	800195a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f903 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000134 	.word	0x20000134
 800171c:	20000130 	.word	0x20000130

08001720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x1c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_IncTick+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <HAL_IncTick+0x20>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000134 	.word	0x20000134
 8001740:	200001dc 	.word	0x200001dc

08001744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <HAL_GetTick+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	200001dc 	.word	0x200001dc

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <__NVIC_EnableIRQ+0x34>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff90 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff2d 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff42 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff35 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e148      	b.n	8001c1a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001988:	2201      	movs	r2, #1
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8137 	bne.w	8001c14 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4aa3      	ldr	r2, [pc, #652]	; (8001c38 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05e      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019b0:	4aa1      	ldr	r2, [pc, #644]	; (8001c38 <HAL_GPIO_Init+0x2c4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d875      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019b6:	4aa1      	ldr	r2, [pc, #644]	; (8001c3c <HAL_GPIO_Init+0x2c8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d058      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019bc:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <HAL_GPIO_Init+0x2c8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d86f      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019c2:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <HAL_GPIO_Init+0x2cc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d052      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019c8:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <HAL_GPIO_Init+0x2cc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d869      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ce:	4a9d      	ldr	r2, [pc, #628]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d04c      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019d4:	4a9b      	ldr	r2, [pc, #620]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d863      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019da:	4a9b      	ldr	r2, [pc, #620]	; (8001c48 <HAL_GPIO_Init+0x2d4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d046      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019e0:	4a99      	ldr	r2, [pc, #612]	; (8001c48 <HAL_GPIO_Init+0x2d4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d85d      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d82a      	bhi.n	8001a40 <HAL_GPIO_Init+0xcc>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d859      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <HAL_GPIO_Init+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001a5b 	.word	0x08001a5b
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001aa3 	.word	0x08001aa3
 8001a10:	08001aa3 	.word	0x08001aa3
 8001a14:	08001aa3 	.word	0x08001aa3
 8001a18:	08001aa3 	.word	0x08001aa3
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001aa3 	.word	0x08001aa3
 8001a30:	08001aa3 	.word	0x08001aa3
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	4a82      	ldr	r2, [pc, #520]	; (8001c4c <HAL_GPIO_Init+0x2d8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e024      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01f      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e01a      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e013      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          break;
 8001aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d801      	bhi.n	8001aae <HAL_GPIO_Init+0x13a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_Init+0x13e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d802      	bhi.n	8001ac0 <HAL_GPIO_Init+0x14c>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x152>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3b08      	subs	r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	210f      	movs	r1, #15
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8090 	beq.w	8001c14 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_GPIO_Init+0x2dc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a55      	ldr	r2, [pc, #340]	; (8001c50 <HAL_GPIO_Init+0x2dc>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_GPIO_Init+0x2dc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0c:	4a51      	ldr	r2, [pc, #324]	; (8001c54 <HAL_GPIO_Init+0x2e0>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <HAL_GPIO_Init+0x2e4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1e0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_GPIO_Init+0x2e8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a47      	ldr	r2, [pc, #284]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1d8>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e004      	b.n	8001b56 <HAL_GPIO_Init+0x1e2>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x1e2>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_GPIO_Init+0x1e2>
 8001b54:	2300      	movs	r3, #0
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b66:	493b      	ldr	r1, [pc, #236]	; (8001c54 <HAL_GPIO_Init+0x2e0>)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4937      	ldr	r1, [pc, #220]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8e:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4933      	ldr	r1, [pc, #204]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	492d      	ldr	r1, [pc, #180]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4929      	ldr	r1, [pc, #164]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4923      	ldr	r1, [pc, #140]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	491f      	ldr	r1, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4919      	ldr	r1, [pc, #100]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4915      	ldr	r1, [pc, #84]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3301      	adds	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aeaf 	bne.w	8001988 <HAL_GPIO_Init+0x14>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	372c      	adds	r7, #44	; 0x2c
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	10320000 	.word	0x10320000
 8001c3c:	10310000 	.word	0x10310000
 8001c40:	10220000 	.word	0x10220000
 8001c44:	10210000 	.word	0x10210000
 8001c48:	10120000 	.word	0x10120000
 8001c4c:	10110000 	.word	0x10110000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40010800 	.word	0x40010800
 8001c5c:	40010c00 	.word	0x40010c00
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca6:	787b      	ldrb	r3, [r7, #1]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb2:	e003      	b.n	8001cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd8:	887a      	ldrh	r2, [r7, #2]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e26c      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x12c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e246      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x76>
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xbc>
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fcb6 	bl	8001744 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fcb2 	bl	8001744 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1fa      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe4>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fca2 	bl	8001744 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fc9e 	bl	8001744 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1e6      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x10c>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1ba      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fc57 	bl	8001744 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fc53 	bl	8001744 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e19b      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fc36 	bl	8001744 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc32 	bl	8001744 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e17a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03a      	beq.n	8001f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d019      	beq.n	8001f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7ff fc16 	bl	8001744 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fc12 	bl	8001744 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e15a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f000 faa6 	bl	800248c <RCC_Delay>
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fbfc 	bl	8001744 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fbf8 	bl	8001744 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e140      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	42420000 	.word	0x42420000
 8001f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b9e      	ldr	r3, [pc, #632]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e9      	bne.n	8001f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a6 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b97      	ldr	r3, [pc, #604]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a93      	ldr	r2, [pc, #588]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b8e      	ldr	r3, [pc, #568]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fbb9 	bl	8001744 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff fbb5 	bl	8001744 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0fd      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a7a      	ldr	r2, [pc, #488]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x334>
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b73      	ldr	r3, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x356>
 8002034:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a66      	ldr	r2, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff fb69 	bl	8001744 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fb65 	bl	8001744 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0ab      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x37e>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fb53 	bl	8001744 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fb4f 	bl	8001744 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e095      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8081 	beq.w	80021e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d061      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d146      	bne.n	8002182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fb23 	bl	8001744 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff fb1f 	bl	8001744 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e067      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	492d      	ldr	r1, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a19      	ldr	r1, [r3, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	430b      	orrs	r3, r1
 800214e:	4927      	ldr	r1, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff faf3 	bl	8001744 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff faef 	bl	8001744 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e037      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
 8002180:	e02f      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fadc 	bl	8001744 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff fad8 	bl	8001744 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x498>
 80021ae:	e018      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42420060 	.word	0x42420060

080021f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d0      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e073      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff fa2c 	bl	8001744 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff fa28 	bl	8001744 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e053      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1cc>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f98a 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08002d10 	.word	0x08002d10
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000130 	.word	0x20000130

080023cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	b490      	push	{r4, r7}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d4:	1d3c      	adds	r4, r7, #4
 80023d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023dc:	f240 2301 	movw	r3, #513	; 0x201
 80023e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x46>
 800240a:	e02d      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240e:	623b      	str	r3, [r7, #32]
      break;
 8002410:	e02d      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800241e:	4413      	add	r3, r2
 8002420:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002424:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c5b      	lsrs	r3, r3, #17
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243e:	4413      	add	r3, r2
 8002440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002444:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244a:	fb02 f203 	mul.w	r2, r2, r3
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e004      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	623b      	str	r3, [r7, #32]
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246a:	623b      	str	r3, [r7, #32]
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6a3b      	ldr	r3, [r7, #32]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc90      	pop	{r4, r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	08002d00 	.word	0x08002d00
 8002480:	40021000 	.word	0x40021000
 8002484:	007a1200 	.word	0x007a1200
 8002488:	003d0900 	.word	0x003d0900

0800248c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <RCC_Delay+0x34>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <RCC_Delay+0x38>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a5b      	lsrs	r3, r3, #9
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a8:	bf00      	nop
  }
  while (Delay --);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <RCC_Delay+0x1c>
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000000 	.word	0x20000000
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e041      	b.n	800255e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fbfe 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fa6a 	bl	80029e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d001      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e035      	b.n	80025ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_TIM_Base_Start_IT+0x90>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_TIM_Base_Start_IT+0x4e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025aa:	d004      	beq.n	80025b6 <HAL_TIM_Base_Start_IT+0x4e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_TIM_Base_Start_IT+0x94>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d111      	bne.n	80025da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d010      	beq.n	80025ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	e007      	b.n	80025ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400

08002600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0202 	mvn.w	r2, #2
 800262c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9b1 	bl	80029aa <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9a4 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f9b3 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0204 	mvn.w	r2, #4
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f987 	bl	80029aa <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f97a 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f989 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0208 	mvn.w	r2, #8
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f95d 	bl	80029aa <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f950 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f95f 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0210 	mvn.w	r2, #16
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2208      	movs	r2, #8
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f933 	bl	80029aa <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f926 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f935 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0201 	mvn.w	r2, #1
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fb8c 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa67 	bl	8002c7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8f9 	bl	80029ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0220 	mvn.w	r2, #32
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa32 	bl	8002c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIM_ConfigClockSource+0x18>
 8002824:	2302      	movs	r3, #2
 8002826:	e0b3      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x180>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002860:	d03e      	beq.n	80028e0 <HAL_TIM_ConfigClockSource+0xd0>
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	f200 8087 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x168>
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286e:	f000 8085 	beq.w	800297c <HAL_TIM_ConfigClockSource+0x16c>
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d87f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d01a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0xa2>
 800287c:	2b70      	cmp	r3, #112	; 0x70
 800287e:	d87b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d050      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x116>
 8002884:	2b60      	cmp	r3, #96	; 0x60
 8002886:	d877      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d03c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0xf6>
 800288c:	2b50      	cmp	r3, #80	; 0x50
 800288e:	d873      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d058      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x136>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d86f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d064      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x156>
 800289c:	2b30      	cmp	r3, #48	; 0x30
 800289e:	d86b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d060      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x156>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d867      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05c      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x156>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d05a      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028b0:	e062      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f000 f95c 	bl	8002b7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]
      break;
 80028de:	e04e      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f000 f945 	bl	8002b7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002902:	609a      	str	r2, [r3, #8]
      break;
 8002904:	e03b      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8bc 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2150      	movs	r1, #80	; 0x50
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f913 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002924:	e02b      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8da 	bl	8002aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2160      	movs	r1, #96	; 0x60
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f903 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002944:	e01b      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f89c 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f8f3 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002964:	e00b      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f000 f8ea 	bl	8002b4a <TIM_ITRx_SetConfig>
        break;
 8002976:	e002      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800297c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <TIM_Base_SetConfig+0xa8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_Base_SetConfig+0x28>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d003      	beq.n	8002a08 <TIM_Base_SetConfig+0x28>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <TIM_Base_SetConfig+0xac>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d108      	bne.n	8002a1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <TIM_Base_SetConfig+0xa8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <TIM_Base_SetConfig+0x52>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d003      	beq.n	8002a32 <TIM_Base_SetConfig+0x52>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <TIM_Base_SetConfig+0xac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <TIM_Base_SetConfig+0xa8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400

08002a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 030a 	bic.w	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 0210 	bic.w	r2, r3, #16
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f043 0307 	orr.w	r3, r3, #7
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	021a      	lsls	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e041      	b.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d004      	beq.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400

08002c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <__libc_init_array>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	2600      	movs	r6, #0
 8002c94:	4d0c      	ldr	r5, [pc, #48]	; (8002cc8 <__libc_init_array+0x38>)
 8002c96:	4c0d      	ldr	r4, [pc, #52]	; (8002ccc <__libc_init_array+0x3c>)
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	42a6      	cmp	r6, r4
 8002c9e:	d109      	bne.n	8002cb4 <__libc_init_array+0x24>
 8002ca0:	f000 f822 	bl	8002ce8 <_init>
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	4d0a      	ldr	r5, [pc, #40]	; (8002cd0 <__libc_init_array+0x40>)
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	; (8002cd4 <__libc_init_array+0x44>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	42a6      	cmp	r6, r4
 8002cb0:	d105      	bne.n	8002cbe <__libc_init_array+0x2e>
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb8:	4798      	blx	r3
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7ee      	b.n	8002c9c <__libc_init_array+0xc>
 8002cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc2:	4798      	blx	r3
 8002cc4:	3601      	adds	r6, #1
 8002cc6:	e7f2      	b.n	8002cae <__libc_init_array+0x1e>
 8002cc8:	08002d20 	.word	0x08002d20
 8002ccc:	08002d20 	.word	0x08002d20
 8002cd0:	08002d20 	.word	0x08002d20
 8002cd4:	08002d24 	.word	0x08002d24

08002cd8 <memset>:
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4402      	add	r2, r0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xa>
 8002ce0:	4770      	bx	lr
 8002ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x4>

08002ce8 <_init>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

08002cf4 <_fini>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr
